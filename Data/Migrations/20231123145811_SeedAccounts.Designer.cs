// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231123145811_SeedAccounts")]
    partial class SeedAccounts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateT")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDateT")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93c3a7ce-45c4-4be9-8cf5-9030c8748330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(815),
                            Email = "administrator@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@TEST.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "4d9c6f2f-0d3b-40f7-9e71-664c3276a413",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(880),
                            Email = "librarian@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIBRARIAN@TEST.COM",
                            NormalizedUserName = "LIBRARIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Librarian"
                        },
                        new
                        {
                            Id = "13b2a13d-6001-477e-9859-f352097da7e7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(890),
                            Email = "assistantlibrarian@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASSISTANTLIBRARIAN@TEST.COM",
                            NormalizedUserName = "ASSISTANTLIBRARIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "AssistantLibrarian"
                        },
                        new
                        {
                            Id = "7e362909-2567-4e1f-a9ae-e57335eeb14d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(898),
                            Email = "technicalstaff@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICALSTAFF@TEST.COM",
                            NormalizedUserName = "TECHNICALSTAFF",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "TechnicalStaff"
                        },
                        new
                        {
                            Id = "a93e2d70-15c0-4ec3-9534-0e4b82d25579",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(904),
                            Email = "patron@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATRON@TEST.COM",
                            NormalizedUserName = "PATRON",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Patron"
                        },
                        new
                        {
                            Id = "f9526d05-d4ba-41d1-ae8f-e2375fdd7042",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(913),
                            Email = "researcher@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RESEARCHER@TEST.COM",
                            NormalizedUserName = "RESEARCHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Researcher"
                        },
                        new
                        {
                            Id = "697660f1-6b37-47d6-a0ea-bedce25e0688",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(919),
                            Email = "eventmanagement@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EVENTMANAGEMENT@TEST.COM",
                            NormalizedUserName = "EVENTMANAGEMENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "EventManagement"
                        },
                        new
                        {
                            Id = "7e06c23c-10a0-435d-8e44-49e5f497cff2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(925),
                            Email = "teacher@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@TEST.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Teacher"
                        },
                        new
                        {
                            Id = "f32ec246-ba2c-4fd4-8fb3-3f7b42389f84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07e1940e-7b71-4607-beaa-e4cd284d491b",
                            CreatedDateT = new DateTime(2023, 11, 23, 14, 58, 11, 828, DateTimeKind.Local).AddTicks(933),
                            Email = "student@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@TEST.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYIf70Mja5pAtAr42rkE/hUsS0WQQWrcls3ej3IZ5/lu8ARMvhBifvz7DAbPonCAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "E7XEF5G2WXH7N5B52N7QPC5QOOK64YO7",
                            StatusId = 1,
                            TwoFactorEnabled = false,
                            UserName = "Student"
                        });
                });

            modelBuilder.Entity("Core.Models.Catalog.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Core.Models.Catalog.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateT")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDateT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublicationDateT")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Core.Models.Catalog.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Core.Models.Catalog.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("Core.Models.Fine.Fines", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FineDateT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoanId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LoanId")
                        .IsUnique();

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("Core.Models.LoanManagement.Loan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CheckoutDateT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDateT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDateT")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("Core.Models.LoanManagement.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReservationDateT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "837a0b05-8bb3-464f-a992-1cdebe7c40d7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "335c109a-fc01-4738-9b93-4f691e013326",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        },
                        new
                        {
                            Id = "a1a8bfa0-3df2-4479-ad7a-c4619a924034",
                            Name = "AssistantLibrarian",
                            NormalizedName = "ASSISTANTLIBRARIAN"
                        },
                        new
                        {
                            Id = "4d9b719f-9fe9-4204-8fcf-53e27a214f84",
                            Name = "TechnicalStaff",
                            NormalizedName = "TECHNICALSTAFF"
                        },
                        new
                        {
                            Id = "eef91604-9e4c-4d32-a36c-693cb4bed332",
                            Name = "Patron",
                            NormalizedName = "PATRON"
                        },
                        new
                        {
                            Id = "01af80e2-1ace-4a3e-bb5f-d16889dd9bc7",
                            Name = "Researcher",
                            NormalizedName = "RESEARCHER"
                        },
                        new
                        {
                            Id = "9c37fced-a97a-4d3d-9f37-206d711b4bcb",
                            Name = "EventManagement",
                            NormalizedName = "EVENTMANAGEMENT"
                        },
                        new
                        {
                            Id = "ea9ae32b-bd8f-467c-941d-c4371771adcb",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "fc7309e9-3d53-42db-b518-95c4e71a2f5e",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.Catalog.Book", b =>
                {
                    b.HasOne("Core.Models.Catalog.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Catalog.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Catalog.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Core.Models.Fine.Fines", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", "ApplicationUser")
                        .WithMany("Fines")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.LoanManagement.Loan", "Loan")
                        .WithOne("Fines")
                        .HasForeignKey("Core.Models.Fine.Fines", "LoanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Core.Models.LoanManagement.Loan", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", "ApplicationUser")
                        .WithMany("Loans")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Catalog.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Core.Models.LoanManagement.Reservation", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", "ApplicationUser")
                        .WithMany("Reservations")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Catalog.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Account.ApplicationUser", b =>
                {
                    b.Navigation("Fines");

                    b.Navigation("Loans");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Core.Models.Catalog.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Core.Models.Catalog.Book", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Core.Models.Catalog.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Core.Models.Catalog.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Core.Models.LoanManagement.Loan", b =>
                {
                    b.Navigation("Fines")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
